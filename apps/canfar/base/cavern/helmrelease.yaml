apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: cavern
  namespace: skaha-system
spec:
  interval: 5m
  chart:
    spec:
      chart: cavern
      version: 0.5.2
      sourceRef:
        kind: HelmRepository
        name: science-platform
        namespace: skaha-system
  values:
# Tell Kubernetes to spin up multiple instances.  Defaults to 1.
    replicaCount: 1

    # It's best to keep these set as such, unless you're willing to change these in several places.
    skaha:
      namespace: skaha-system

    # Skaha web service deployment
    deployment:
      hostname: canfar.ral.uksrc.org
      cavern:
        # How cavern identifies itself.
        resourceID: "ivo://canfar.ral.uksrc.org/posix-mapper"

        # Set the Registry URL pointing to the desired registry (https:// URL)
        registryURL: https://spsrc27.iaa.csic.es/reg

        # This applies to Cavern itself.  Meaning, this Pod will be scheduled as described
        # by the nodeAffinity clause.
        # See https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes-using-node-affinity/
        # nodeAffinity: {}

        # The Resource ID of the Service that contains the Posix Mapping information
        posixMapperResourceID: "ivo://canfar.ral.uksrc.org/posix-mapper"

        # URI or URL of the OIDC (IAM) server.  Used to validate incoming tokens.  Required.
        oidcURI: https://ska-iam.stfc.ac.uk/

        # ID (URI) of the GMS Service.  Required
        gmsID: ivo://skao.int/gms

        # Array of groups allowed to set the logging level.  If none set, then nobody can change the log level.
        # loggingGroups: []

        # Simple Class name of the QuotaPlugin to use.  This is used to request quota and folder size information
        # from the underlying storage system.  Optional, defaults to NoQuotaPlugin.
        #
        # - For CephFS deployments: CephFSQuotaPlugin
        # - Default: NoQuotaPlugin
        #
        # quotaPlugin: {NoQuotaPlugin | CephFSQuotaPlug}

        filesystem:
          # persistent data directory in container
          dataDir: "/data"

          # RELATIVE path to the node/file content that could be mounted in other containers
          # This will be used in a `dataDir`/`subPath` manner to remove shared data from the root folder.
          subPath: "cavern"

          # The adminUsername is required to be set whomever has admin access over the
          # filesystem.dataDir above.
          # rootOwner:
          #   adminUsername: "bo307"
          #   username: "bo307"
          #   uid: 10001
          #   gid: 10001

          rootOwner:
            adminUsername: "root"
            username: "root"
            uid: 1000
            gid: 1000

          # (optional) base directory exposed for sshfs mounts
          # sshfs:
          #   serverBase: {server}[:{port}]:{path}

        # The IdentityManager class handling authentication.  This should generally be left alone.
        identityManagerClass: org.opencadc.auth.StandardIdentityManager

        # # For the UWS PostgreSQL database.
        # uws:
        #   db:
        #     install: true # Whether to deploy a local PostgreSQL database.  Set to false to use your own.
        #     runUID: 999  # Postgres User default in the postgres:15 image if install: true
        #     # url: "jdbc:postgresql://<host>:<port>/<database>" # if install: false, then set this to where it should point to
        #     database: "uws"  # if install: true, otherwise it's ignored
        #     username: "uwsuser"
        #     password: "uwspwd"
        #     schema: "uws"
        #     maxActive: 2

        # Optional rename of the application from the default "cavern".
        # applicationName: "cavern"

        # The endpoint to serve this from.  Defaults to /cavern.  If the applicationName is changed, then this should match.
        # Don't forget to update your registry entries!
        # endpoint: "/cavern"

        # Optionally mount a custom CA certificate
        extraVolumeMounts:
        - mountPath: "/config/cacerts"
          name: cacert-volume

        # Create the CA certificate volume to be mounted in extraVolumeMounts
        extraVolumes:
        - name: cacert-volume
          secret:
            defaultMode: 420
            secretName: canfar-tls-secret

        # Resources provided to the Skaha service.
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "500m"
    # Set these appropriately to match your Persistent Volume Claim labels.
    storage:
      service:
        spec:
          persistentVolumeClaim:
            claimName: skaha-pvc