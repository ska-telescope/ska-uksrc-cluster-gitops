hub:
  # Configure IAM authentication
  config:
    JupyterHub:
      authenticator_class: generic-oauth
    GenericOAuthenticator:
      login_service: "SKA-IAM"
      # client_id: <stored-in-sealed-secret>
      # client_secret: <stored-in-sealed-secret>
      # Must match ingress host
      oauth_callback_url: https://ral.uksrc.org/jupyterhub/hub/oauth_callback
      authorize_url: https://ska-iam.stfc.ac.uk/authorize
      token_url: https://ska-iam.stfc.ac.uk/token
      userdata_url: https://ska-iam.stfc.ac.uk/userinfo 
      scope:
        - openid
        - profile
        - email
        - offline_access
      username_claim: preferred_username
      userdata_token_method: GET
      userdata_params:
        state: state
    baseURL: https://ral.uksrc.org/jupyterhub
    db:
        pvc:
          storageClassName: csi-cinder
  allowNamedServers: true
  namedServerLimitPerUser: 5
  activeServerLimit: 3
  # Server startup fails with default
  # restrictive network policy.

  # We install the kubernetes client here so that we can use it to
  # detect weather the cluster has any GPU nodes, allowing us to show/hide
  # GPU nodebook profiles automatically.
  args:
    - bash
    - -c
    - "pip install kubernetes && jupyterhub --config /usr/local/etc/jupyterhub/jupyterhub_config.py --upgrade-db"
  extraConfig:
    # Add user profiles dynamically based on cluster hardware
    customspawner.py: |
      from kubespawner import KubeSpawner
      from kubernetes import client, config

      def build_profiles(spawner: KubeSpawner):
        profiles = [
          {
            "display_name": "Minimal environment",
            "description": "To avoid too much bells and whistles: Python.",
            "default": True,
          },
          {
            "display_name": "Datascience environment",
            "description": "If you want the additional bells and whistles: Python, R, and Julia.",
            "kubespawner_override": {
              "image": "quay.io/jupyter/datascience-notebook:2024-08-05"
            },
          },
        ]

        config.load_incluster_config()
        api = client.CoreV1Api()
        nodes = api.list_node().items
        has_gpu = lambda node: node.metadata.labels.get("nvidia.com/gpu.present", "") == "true"
        if any(map(has_gpu, nodes)):
          profiles.append({
            "display_name": "Pytorch environment",
            "description": "The official Jupyter Pytorch + CUDA image. Requires a GPU compatible notebook server.",
            "kubespawner_override": {
              "image": "quay.io/jupyter/pytorch-notebook:cuda12-pytorch-2.4.0",
              "extra_resource_limits": {
                "nvidia.com/gpu": "1",
              },
            },
          })
        else:
          profiles.append({
            "display_name": "Pytorch environment",
            "description": "The official Jupyter Pytorch.",
            "kubespawner_override": {
              "image": "quay.io/jupyter/pytorch-notebook:pytorch-2.4.0",
            },
          })

        return profiles

      c.KubeSpawner.profile_list = build_profiles

networkPolicy:
  enabled: false

proxy:
  service:
    type: ClusterIP

ingress:
  enabled: true
  ingressClassName: nginx
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-stage
  hosts: ral.uksrc.org
  pathSuffix: "/jupyterhub/"
  tls:
    - hosts: ral.uksrc.org
      secretName: jupyterhub-ingress-cert

singleuser:
   memory:
      limit: 1G
      guarantee: 1G
   cpu:
      limit: 0.5
      guarantee: 0.5
   storage:
      dynamic:
         storageClass: csi-cinder
      capacity: 1Gi
   defaultUrl: "/lab"
   extraEnv:
      JUPYTERHUB_SINGLEUSER_APP: "jupyter_server.serverapp.ServerApp"
   image:
      name: jupyter/minimal-notebook
      tag: latest

prePuller:
  hook:
    enabled: false
  continuous:
    enabled: false